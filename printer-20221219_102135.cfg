# This file contains common pin mappings for the BigTreeTech Octopus V1.
# To use this config, the firmware should be compiled for the STM32F446 with a "32KiB bootloader"
# Enable "extra low-level configuration options" and select the "12MHz crystal" as clock reference

# after running "make", copy the generated "klipper/out/klipper.bin" file to a
# file named "firmware.bin" on an SD card and then restart the OctoPus with that SD card.

# See docs/Config_Reference.md for a description of parameters.
## Voron Design VORON2 250/300/350mm BigTreeTech OctoPus V1 TMC2209 UART config

## *** THINGS TO CHANGE/CHECK: ***
## MCU paths                            [mcu] section
## Thermistor types                     [extruder] and [heater_bed] sections - See https://www.klipper3d.org/Config_Reference.html#common-thermistors for common thermistor types
## Z Endstop Switch location            [safe_z_home] section
## Homing end position                  [gcode_macro G32] section
## Z Endstop Switch  offset for Z0      [stepper_z] section
## Probe points                         [quad_gantry_level] section
## Min & Max gantry corner postions     [quad_gantry_level] section
## PID tune                             [extruder] and [heater_bed] sections
## Probe pin                            [probe] section
## Fine tune E steps                    [extruder] section

##electronics cabinate fans				[temperature_fan controller_fan]
##Klicky auto z							[z_calibration]



#SETUP
[include fluidd.cfg]
[mcu]##  Obtain definition by "ls -l /dev/serial/by-id/" then unplug to verify
serial: /dev/serial/by-id/usb-Klipper_stm32f446xx_400031000550304E35313720-if00
restart_method: command

[mcu rpi]
serial: /tmp/klipper_host_mcu

[adxl345]
cs_pin: rpi:None

[resonance_tester]
accel_chip: adxl345
probe_points:
    125, 125, 20  # an example
	
[printer]
kinematics: corexy
max_velocity:500 # my max=550  
max_accel:10000 # 8500 #16500 #my max           #Max 4000
max_z_velocity: 15          #Max 15 for 12V TMC Drivers, can increase for 24V
max_z_accel: 350
square_corner_velocity: 5.0

#####################################################################
###		Stepper Settings	#########################################
	# B Stepper - Left
	#  Connected to MOTOR_0
	# Endstop connected to DIAG_0
[stepper_x]
step_pin: PF13
dir_pin: PF12
enable_pin: !PF14
rotation_distance: 40
microsteps: 32
full_steps_per_rotation:200  #set to 400 for 0.9 degree stepper
endstop_pin: PG6	;PG9
position_min: 0
## 250mm build--------------------------------------------------------------------
position_endstop: 250
position_max: 250
##Homing Settings--------------------------------------------------------------------
homing_speed: 75#25   #Max 100
homing_retract_dist: 10#5
homing_positive_dir: true

[tmc2209 stepper_x]		##  A Stepper - Right	##  Connected to MOTOR_1	##  Endstop connected to DIAG_1
uart_pin: PC4
interpolate: false
run_current: 0.8
sense_resistor: 0.110
stealthchop_threshold: 0

[stepper_y]
step_pin: PG0
dir_pin: PG1
enable_pin: !PF15
rotation_distance: 40
microsteps: 32
full_steps_per_rotation:200  #set to 400 for 0.9 degree stepper
endstop_pin: PG9	;used to be PG6
position_min: 0
##250mm build--------------------------------------------------------------------
position_endstop: 250
position_max: 250
## Homing Settings--------------------------------------------------------------------
homing_speed: 75  #Max 100
homing_retract_dist: 5
homing_positive_dir: true

[tmc2209 stepper_y]
uart_pin: PD11
interpolate: false
run_current: 0.8
sense_resistor: 0.110
stealthchop_threshold: 0
 

####Z Stepper Settings

	#Endstop connected to DIAG_2
# Z0 Stepper - Front Left		#  Connected to MOTOR_2		
[stepper_z]
step_pin: PF11
dir_pin: PG3
enable_pin: !PG5
rotation_distance: 40
gear_ratio: 80:16
microsteps: 32
endstop_pin: PG10
position_max: 230	#for 250mm build
position_min: -5
homing_speed: 10
second_homing_speed: 3
homing_retract_dist: 3
#position_endstop: 3
##  Z-position of nozzle (in mm) to z-endstop trigger point relative to print surface (Z0)
##  (+) value = endstop above Z0, (-) value = endstop below
##  Increasing position_endstop brings nozzle closer to the bed
##  After you run Z_ENDSTOP_CALIBRATE, position_endstop will be stored at the very end of your config
[tmc2209 stepper_z]
uart_pin: PC6
interpolate: false
run_current: 0.8
sense_resistor: 0.110
stealthchop_threshold: 0

##  Z1 Stepper - Rear Left		#  Connected to MOTOR_3
[stepper_z1]
step_pin: PG4
dir_pin: !PC1
enable_pin: !PA0
rotation_distance: 40
gear_ratio: 80:16
microsteps: 32
[tmc2209 stepper_z1]
uart_pin: PC7
interpolate: false
run_current: 0.8
sense_resistor: 0.110
stealthchop_threshold: 0

##  Z2 Stepper - Rear Right		#  Connected to MOTOR_4
[stepper_z2]
step_pin: PF9
dir_pin: PF10
enable_pin: !PG2
rotation_distance: 40
gear_ratio: 80:16
microsteps: 32
[tmc2209 stepper_z2]
uart_pin: PF2
interpolate: false
run_current: 0.8
sense_resistor: 0.110
stealthchop_threshold: 0

##  Z3 Stepper - Front Right	#  Connected to MOTOR_5
[stepper_z3]
step_pin: PC13
dir_pin: !PF0
enable_pin: !PF1
rotation_distance: 40
gear_ratio: 80:16
microsteps: 32
[tmc2209 stepper_z3]
uart_pin: PE4
interpolate: false
run_current: 0.8
sense_resistor: 0.110
stealthchop_threshold: 0

#Extruder#########################################################################################################################################################################################################################################################################################################################################################
	##  Connected to MOTOR_6
	##  Heater - HE0
	##  Thermistor - T0
[extruder]
step_pin: PE2
dir_pin: !PE3
enable_pin: !PD4
##  Update value below when you perform extruder calibration
##  If you ask for 100mm of filament, but in reality it is 98mm:
##  rotation_distance = <previous_rotation_distance> * <actual_extrude_distance> / 100
##  22.6789511 is a good starting point
rotation_distance: 21.5653167845724  #Bondtech 5mm Drive Gears
##  Update Gear Ratio depending on your Extruder Type
##  Use 50:17 for Afterburner/Clockwork (BMG Gear Ratio)
##  Use 80:20 for M4, M3.1
gear_ratio: 50:10               #BMG Gear Ratio
microsteps: 32
full_steps_per_rotation: 200    #200 for 1.8 degree, 400 for 0.9 degree
nozzle_diameter: 0.400
filament_diameter: 1.75
heater_pin: PA2
## Check what thermistor type you have. See https://www.klipper3d.org/Config_Reference.html#common-thermistors for common thermistor types.
## Use "Generic 3950" for NTC 100k 3950 thermistors

;sensor_type: Generic 3950 # V6/Dragon
sensor_type: PT1000 # Rapido
sensor_pin: PF4
min_temp: 10
max_temp: 300
max_power: 1.0
min_extrude_temp: 170
#control = pid
#pid_kp = 26.213
#pid_ki = 1.304
#pid_kd = 131.721
##  Try to keep pressure_advance below 1.0
#pressure_advance: 0.05
##  Default is 0.040, leave stock
#pressure_advance_smooth_time: 0.040

##  E0 on MOTOR6
##  Make sure to update below for your relevant driver (2208 or 2209)
max_extrude_only_distance: 200	#for ERCF
max_extrude_cross_section: 50	#for ERCF
[tmc2209 extruder]
uart_pin: PE1
interpolate: false
run_current: 0.75
sense_resistor: 0.110
stealthchop_threshold: 0
#####################################################################

#####################################################################
###		Bed Settings	#############################################
[heater_bed]

heater_pin: PA3
	##  SSR Pin - HE1
	##  Thermistor - TB
	##  Uncomment the following line if using the default SSR wiring from the docs site
	##  Other wiring guides may use BED_OUT to control the SSR. Uncomment the following line for those cases
	#heater_pin: PA1
	## Check what thermistor type you have. See https://www.klipper3d.org/Config_Reference.html#common-thermistors for common thermistor types.
	## Use "Generic 3950" for Keenovo heaters
sensor_type: Generic 3950
sensor_pin: PF3
	##  Adjust Max Power so your heater doesn't warp your bed. Rule of thumb is 0.4 watts / cm^2 .
	# 25^2 *.4 =250
max_power: 0.6
min_temp: 0
max_temp: 120
#control: pid
#pid_kp: 58.437
#pid_ki: 2.347
#pid_kd: 363.769

[bed_mesh]
speed: 100
horizontal_move_z: 10
##--------------------------------------------------------------------
##	Uncomment below for 250mm build
mesh_min: 40, 40
mesh_max: 210,210

##--------------------------------------------------------------------
fade_start: 0.6
fade_end: 10.0
probe_count: 10,10
algorithm: bicubic
relative_reference_index: 12



[quad_gantry_level]
gantry_corners:
  -60,-10
   310, 320
#  Probe points
points:
   50,25
   50,175
   200,175
   200,25
#--------------------------------------------------------------------
speed: 100
horizontal_move_z: 10
retries: 5
retry_tolerance: 0.0075
max_adjust: 10
#####################################################################

#####################################################################
###   	Probe	#####################################################
[probe]
pin: ~PG15
x_offset: 0.9
y_offset: 23.2
#z_offset: 8
speed: 5
samples: 5
samples_result: median
sample_retract_dist: 1.0
samples_tolerance: 0.03
samples_tolerance_retries: 4
##  Inductive Probe
##  This probe is not used for Z height, only Quad Gantry Leveling

## Select the probe port by type:
## For the PROBE port. Will not work with Diode. May need pull-up resistor from signal to 24V.
#pin: ~!PB7
## For the DIAG_7 port. NEEDS BAT85 DIODE! Change to !PG15 if probe is NO.
#pin: PG15
## For Octopus Pro PROBE port; NPN and PNP proximity switch types can be set by jumper
#####################################################################
#####################################################################

#####################################################################
###   	Fan Control		#############################################
##################################
##		Old Controller fan code 
;[heater_fan controller_fan]
## Controller fan - CNC_FAN2
;pin: PD12
;kick_start_time: 0.5
;heater: heater_bed
;NOT OG-heater_temp: 45.0
#fan_speed: 1.0

#[heater_fan exhaust_fan]
##  Exhaust fan - FAN3
#pin: PD13
#max_power: 1.0
#shutdown_speed: 0.0
#kick_start_time: 5.0
#heater: heater_bed
#heater_temp: 60
#fan_speed: 1.0

##################################
[fan]							## Print Cooling Fan - FAN0
pin: PA8
kick_start_time: 0.5
##  Depending on your fan, you may need to increase this value
##  if your fan will not start. Can change cycle_time (increase)
##  if your fan is not able to slow down effectively
off_below: 0.10

[heater_fan hotend_fan]			## Hotend Fan - FAN1
pin: PE5
max_power: 1.0
kick_start_time: 0.5
heater: extruder
heater_temp: 80.0
	##  If you are experiencing back flow, you can reduce fan_speed

[temperature_fan CHAMBER]		## Chamber Cooling Fan
#Chamber Preheat EXAMPLE->		 SET_TEMPERATURE_FAN_TARGET temperature_fan="chambertemp" target=[{chambertemp}/temp]
pin: PD13
max_power: 0.5
shutdown_speed: 0.0
kick_start_time: 5.0
cycle_time:0.01
off_below:0.1
sensor_type: Generic 3950
sensor_pin: PF5
min_temp: 0
max_temp: 70
target_temp: 60	;defult target
control: watermark
gcode_id: C

[temperature_fan controller_fan]## Raspberry pi & Electronics Compartment cooling
#controller cooling EXAMPLE-> SET_TEMPERATURE_FAN_TARGET temperature_fan="controller_fan" target=(temp)	
pin: PD12
kick_start_time: .8	;time to run at 100% after starting before it slows : can go as low as 0.5
off_below:0.1
off_below:0.1
max_speed: 0.8
cycle_time:0.01
sensor_type:temperature_host
min_temp: 10
target_temp: 60.0
max_temp: 100
control: watermark
#####################################################################

####################################################################
###		Displays, Lighting & Beep	################################

# EXP1 / EXP2 (display) pins	#####################################
[board_pins]
aliases:
    # EXP1 header
    EXP1_1=PE8, EXP1_2=PE7,
    EXP1_3=PE9, EXP1_4=PE10,
    EXP1_5=PE12, EXP1_6=PE13,    # Slot in the socket on this side
    EXP1_7=PE14, EXP1_8=PE15,
    EXP1_9=<GND>, EXP1_10=<5V>,

    # EXP2 header
    EXP2_1=PA6, EXP2_2=PA5,
    EXP2_3=PB1, EXP2_4=PA4,
    EXP2_5=PB2, EXP2_6=PA7,      # Slot in the socket on this side
    EXP2_7=PC15, EXP2_8=<RST>,
    EXP2_9=<GND>, EXP2_10=<5V>

[display]
#  mini12864 LCD Display
lcd_type: uc1701
cs_pin: EXP1_3
a0_pin: EXP1_4
rst_pin: EXP1_5
encoder_pins: ^EXP2_5, ^EXP2_3
click_pin: ^!EXP1_2
contrast: 63
spi_software_miso_pin: EXP2_1
spi_software_mosi_pin: EXP2_6
spi_software_sclk_pin: EXP2_2

[neopixel btt_mini12864]
#  To control Neopixel RGB in mini12864 display
pin: EXP1_6
chain_count: 3
initial_RED: 0.5
initial_GREEN: 0.5
initial_BLUE: 1.0
color_order: GRB

[output_pin beeper]
pin: EXP1_1
value: 0
shutdown_value: 0
pwm: True
cycle_time: 0.0005 ; Default beeper tone in kHz. 1 / 0.0005 = 2000Hz (2kHz)

[gcode_macro BEEP]
gcode:
    # Parameters
    {% set i = params.I|default(1)|int %}           ; Iterations (number of times to beep).
    {% set dur = params.DUR|default(100)|int %}     ; Duration/wait of each beep in ms. Default 100ms.
    {% set freq = params.FREQ|default(2000)|int %}  ; Frequency in Hz. Default 2kHz.

    {% for iteration in range(i|int) %}
        SET_PIN PIN=beeper VALUE=0.8 CYCLE_TIME={ 1.0/freq if freq > 0 else 1 }
        G4 P{dur}
        SET_PIN PIN=beeper VALUE=0
        G4 P{dur}
    {% endfor %}

 

[delayed_gcode setdisplayneopixel]	#  Set RGB values on boot up for each Neopixel. 
initial_duration: 1
gcode:#Index 1 = display, Index 2 and 3 = Knob
	SET_LED LED=btt_mini12864 RED=1 GREEN=1 BLUE=1 INDEX=1 TRANSMIT=0
	SET_LED LED=btt_mini12864 RED=0.5 GREEN=0.5 BLUE=1 INDEX=2 TRANSMIT=0
	SET_LED LED=btt_mini12864 RED=0 GREEN=0 BLUE=1 INDEX=3 

[neopixel SB_led]
pin: PB0			# The pin connected to the neopixel. This parameter must be provided.
chain_count: 3 		# The number of Neopixel chips that are "daisy chained" to the provided pin. The default is 1 (which indicates only a single Neopixel is connected to the pin).
color_order: GRB	# Set the pixel order required by the LED hardware. Options are GRB,RGB, GRBW, or RGBW. The default is GRB.				
	#initial_RED: 0.2	# Sets the initial LED color of the Neopixel. Each value should be between 0.0 and 1.0. The WHITE option is only available on RGBW
	#initial_GREEN: 0.2	# Sets the initial LED color of the Neopixel. Each value should be between 0.0 and 1.0. The WHITE option is only available on RGBW
	#initial_BLUE: 0.2	# Sets the initial LED color of the Neopixel. Each value should be between 0.0 and 1.0. The WHITE option is only available on RGBW
	#initial_WHITE: 0.0	# Sets the initial LED color of the Neopixel. Each value should be between 0.0 and 1.0. The WHITE option is only available on RGBW
	# SET_LED LED=btt_mini12864 RED=1 GREEN=1 BLUE=1 INDEX=1 TRANSMIT=0
####################################################################

#####################################################################
### 	Z offset Calibration	#####################################
[z_calibration]
nozzle_xy_position:181,250   ;<X,Y position for clicking the nozzle on the Z endstop>
switch_xy_position:178,229   ;<X,Y position for clicking the probe's switch body on the Z endstop>
bed_xy_position:125,125      ;<X,Y position for probing the bed, for instance the center point>
probing_speed: 40
max_deviation: 2.0
switch_offset:0.24 ;~-0.16 is about what my z offset needed to be for first layer------0.45 was measured value     ;<offset of the switch trigger (read the Switch Offset section!)>
start_gcode:          ;<macro name for attaching the probe>
	CG28
	attach_probe
#before_switch_gcode: <macro name for attaching the probe AFTER probing the nozzle>
end_gcode:            ;<macro name for docking the probe>
	dock_probe
#####################################################################

[idle_timeout]
gcode:
#   A list of G-Code commands to execute on an idle timeout. See
#   docs/Command_Templates.md for G-Code format. The default is to run
#   "TURN_OFF_HEATERS" and "M84".
#   Idle time (in seconds) to wait before running the above G-Code
#   commands. The default is 600 seconds.
	TURN_OFF_HEATERS
	M84

   	SET_LED 	LED=SB_led 			RED=0 		GREEN=0 	BLUE=0 		INDEX=1 #TRANSMIT=0	#set led but dont update untill last one
	SET_LED 	LED=SB_led 			RED=0 		GREEN=0 	BLUE=0 		INDEX=2 #TRANSMIT=0	#set led but dont update untill last one
	SET_LED 	LED=SB_led 			RED=0 		GREEN=0 	BLUE=0 		INDEX=3 #TRANSMIT=0	#set led but dont update untill last one
	SET_LED 	LED=btt_mini12864 	RED=0		GREEN=0 	BLUE=0 		INDEX=1 #TRANSMIT=0	#set led but dont update untill last one
	SET_LED 	LED=btt_mini12864 	RED=0 		GREEN=0 	BLUE=0 		INDEX=2 #TRANSMIT=0	#set led but dont update untill last one
	SET_LED 	LED=btt_mini12864 	RED=0 		GREEN=0 	BLUE=0 		INDEX=3 #SYNC=0		#set led but and update all others without resetting idle timeout
timeout: 5000

#####################################################################
###		[includes BLAHHHHHHH]	#####################################
[include klicky-probe.cfg]
[exclude_object]
[skew_correction]

##ERCF
#[pause_resume]
#recover_velocity: 300.0
[include ./ercf_hardware.cfg]
[include ./ercf_software.cfg]
[include ./ercf_parameters.cfg]
#####################################################################



#####################################################################
#   Macros

[gcode_macro G32]				;Full (Pre Print) homing sequence
gcode:
    #SAVE_GCODE_STATE NAME=STATE_G32
   # G90                 			;Absolute Positioning
    #G28                 			;home
   # CQGL   			;Align axis with bed
	#CALIBRATE_Z
    #RESTORE_GCODE_STATE NAME=STATE_G32
	

[gcode_macro PRINT_START]
gcode:
	SAVE_GCODE_STATE NAME=STATE_PRINTSTART
	CLEAR_PAUSE
    # Parameters
    {% set bedtemp 		= 	params.BED|int %}
    {% set hotendtemp 	= 	params.HOTEND|int %}
    {% set chambertemp 	= 	params.CHAMBER|default(0)|int %}
	{% set AdjustZ		= 	params.Z_ADJUST|default(-0.0)|float %}

	{% set DockX 		= 	42.8 	%}
	{% set DockY 		= 	245 	%}

	SET_LED 	LED=SB_led 	RED=0 	GREEN=0 	BLUE=1 		INDEX=1 
	SET_LED 	LED=SB_led 	RED=0 	GREEN=0 	BLUE=1 		INDEX=2 
	SET_LED 	LED=SB_led 	RED=0 	GREEN=0 	BLUE=1 		INDEX=3 
	
	##### - Heating - #####
	#M104 		S100
    M190 		S{bedtemp} 
	M104 		S100
												
    #TEMPERATURE_WAIT SENSOR=CHAMBER MINIMUM={chambertemp}     ; wait for chamber temp
	
	SET_LED 	LED=SB_led 	RED=1 	GREEN=0 	BLUE=0 		INDEX=1 
	SET_LED 	LED=SB_led 	RED=1 	GREEN=0 	BLUE=0 		INDEX=2 
	SET_LED 	LED=SB_led 	RED=1 	GREEN=0 	BLUE=0 		INDEX=3 

	##### - Homing Sequence - #####
    CG28
	M400                           ; wait for buffer to clear
	attach_probe
	CQGL     
		
	decontaminate WIPES=10 PURGE=10 EXTTEMP={hotendtemp-30}

	M104 	S{hotendtemp}

	CALIBRATE_Z
	dock_probe

	SET_LED 	LED=SB_led 	RED=1 	GREEN=1 	BLUE=1  INDEX=1 
	SET_LED 	LED=SB_led 	RED=1 	GREEN=1 	BLUE=1  INDEX=2 
	SET_LED 	LED=SB_led 	RED=1 	GREEN=1 	BLUE=1  INDEX=3 

	# Quick Brush
	G90									# ABS Coordinate sys
	G0 					Z15	F10000		# Safety lift
	G0	X71		Y250	Z9	F10000		# Go to Probe side and brush height
	G0	X101				F10000		# Brush to the RIIIIIIIIIGHT
	G0	X71					F10000		# Brush to the LEEEEEEEEEEFT
	G0	X125				F10000		# Brush to the RIIIIIIIIIGHT (away from probe)
	G0			Y125	Z15	F10000		# Lift com  forward (AKA, CRISS-CROSS)

	RESTORE_GCODE_STATE NAME=STATE_PRINTSTART
	#Old klicky SET_GCODE_OFFSET Z_ADJUST={params.Z_ADJUST|default(-0.16)|float} MOVE=1 
	SET_GCODE_OFFSET Z_ADJUST={params.Z_ADJUST|default(-0.25)|float} MOVE=1 
	SKEW_PROFILE LOAD=my_skew_profile

[gcode_macro DECONTAMINATE]
gcode:
	{% set wipe_count	= 	params.WIPES|default(2)|int %}
	{% set PurgeE		= 	params.PURGE|default(0)|int %}
	{% set Retract		= 	params.RETRACT|default(-5)|int %}
	{% set Htemp		= 	params.EXTTEMP|default(230)|int %}

	{% set PurgeX 		=	116		%}
	{% set PurgeZ		=	10		%}

	{% set BrushXR 		=	101		%}
	{% set BrushXL 		=	71		%}
	{% set BrushY 		=	250		%}
	{% set BrushZ 		=	9		%}

	SET_LED 	LED=SB_led 	RED=0 	GREEN=1 	BLUE=0  INDEX=1 
	SET_LED 	LED=SB_led 	RED=0 	GREEN=1 	BLUE=0  INDEX=2 
	SET_LED 	LED=SB_led 	RED=0 	GREEN=1 	BLUE=0  INDEX=3 

	M104 	S{Htemp}
	
	SAVE_GCODE_STATE NAME=STATE_DECONTAMINATE      		
	CG28 						# Home if needed 
   	G90 						# Absolute Cordanites
	G0 	Z50	F12000 
	G0 		X{PurgeX}	Y{BrushY}		F12000 		# Go to Purge location
	M83 													# Relitive Extrusion
	M109 	S{Htemp}										# Ensure Hotend is up to temp
	G1 		Z{PurgeZ}	E{PurgeE}				F600 					# Move down & Purge
	M400                           							# wait for buffer to clear
	G1 		E{Retract}							F600		# Retract Filiment
	G4 		P2000											# wait 1 second for pre dribble
	G1 		Z{BrushZ} 							F1000		# Move up before brush
	
	# https://www.klipper3d.org/Command_Templates.html#:~:text=first%20G1%20command.-,Template%20expansion,%C2%B6,-The%20gcode_macro%20gcode
	{% for wipe in range(wipe_count) %}					
    	 #{% for coordinate in [ ({BrushXR},{BrushY}), ({BrushXL},{BrushY}) ] %}
		 {% for coordinate in [ (101, 250), (71, 250)] %}
      		 G0 X{coordinate[0]} Y{coordinate[1] - 3/(wipe+1)} 	 F12000
    	{% endfor %}
  	{% endfor %}
	G91 
	G0 Z10	F12000 
	RESTORE_GCODE_STATE NAME=STATE_DECONTAMINATE

[gcode_macro PREHEAT]
gcode:
	{% set bedtemp 		= 	params.BED|default(110)|int %}
	{% set chambertemp 	= 	params.CHAMBER|default(0)|int %}
	M140 		S{bedtemp}
	CG28
	dock_probe
	SAVE_GCODE_STATE NAME=GSTATE_PREHEAT
	G90 # ABS Coordinate System
	G0 					Z20
	M106 S225 	# max cooling fan for chamver temp
	G0 	X125	Y125 	Z10
	M190 		S{bedtemp}
	RESTORE_GCODE_STATE NAME=GSTATE_PREHEAT    
	



[gcode_macro PRINT_END]			;at end of print
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
	#ERCF
	{%set unload =params.UNLOAD_AT_END|default(0)|int %}
	#SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0
	BEEP
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-5.0 F1800                 ; retract filament

	#{% if unload|int ==1%}
#		ERCF_EJECT
	#{% endif %}
	TURN_OFF_HEATERS
	G91
	G0 z50 F10000 # REDUCE So Probe just clears Brush
	G90
	G0 x125 y250 F12000 


    
   # SAVE_GCODE_STATE NAME=STATE_PRINT_END
    M107                                     ; turn off fan
    BED_MESH_CLEAR
    #RESTORE_GCODE_STATE NAME=STATE_PRINT_END

[gcode_macro CG28]				;Conditional homing
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28
    {% endif %}

[gcode_macro CQGL]
gcode:
    {% if printer.quad_gantry_level.applied == False %}
        QUAD_GANTRY_LEVEL
        G28 Z
    {% endif %}

[gcode_macro GOEasyAccess]		;Go to front middle	
gcode:
	SAVE_GCODE_STATE NAME=GEA
		CG28
		G90
		G0 x125 y30 z100
	RESTORE_GCODE_STATE NAME=GEA

[gcode_macro Go_Maintainance]	;Go to top front left so i can access and oil the rails
gcode:
	
    CG28
    G90
    G0 x0 y0 z200

[gcode_macro M109]
rename_existing: M99109
gcode:
    #Parameters
    {% set s = params.S|float %}
    
    M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}  ; Set hotend temp
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s} MAXIMUM={s+1}   ; Wait for hotend temp (within 1 degree)
    {% endif %}

# bed heating
[gcode_macro M190] #Dont use with bed fans
rename_existing: M99190
gcode:
    #Parameters
    {% set s = params.S|float %}

    M140 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}   ; Set bed temp
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={s} MAXIMUM={s+1}  ; Wait for bed temp (within 1 degree)
    {% endif %}

[gcode_macro M600]
gcode:
    #LCDRGB R=0 G=1 B=0  ; Turn LCD green
    PAUSE                ; Pause

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    # Parameters
    {% set z = params.Z|default(20)|int %}                                                   ; z hop amount
    
    {% if printer['pause_resume'].is_paused|int == 0 %}     
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                              ; set z hop variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}    ; set hotend temp variable for reference in resume macro
                                
       # SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0                                  ; disable filament sensor       
        SAVE_GCODE_STATE NAME=PAUSE                                                          ; save current print position for resume                
        BASE_PAUSE                                                                           ; pause print
        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}       ; check that zhop doesn't exceed z max
            G91                                                                              ; relative positioning
            G1 Z{z} F900                                                                     ; raise Z up by z hop amount
        {% else %}
            { action_respond_info("Pause zhop exceeds maximum Z height.") }                  ; if z max is exceeded, show message and set zhop value for resume to 0
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}
        G90                                                                                  ; absolute positioning
        G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000   ; park toolhead at front center
        SAVE_GCODE_STATE NAME=PAUSEPARK                                                      ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error) 
        M104 S0                                                                              ; turn off hotend
        SET_IDLE_TIMEOUT TIMEOUT=43200                                                       ; set timeout to 12 hours
    {% endif %}

[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
    # Parameters
    {% set e = params.E|default(2.5)|int %}                                          ; hotend prime amount (in mm)
    
    {% if printer['pause_resume'].is_paused|int == 1 %}
        #SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1                          ; enable filament sensor
        #RESETRGB                                                                    ; reset LCD color
        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}  ; set timeout back to configured value
        {% if etemp > 0 %}
            M109 S{etemp|int}                                                        ; wait for hotend to heat back up
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                     ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)  
        G91                                                                          ; relative positioning
        M83                                                                          ; relative extruder positioning
        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}                                                
            G1 Z{zhop * -1} E{e} F900                                                ; prime nozzle by E, lower Z back down
        {% else %}                      
            G1 Z{zhop * -1} F900                                                     ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
        {% endif %}                             
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60                          ; restore position
        BASE_RESUME                                                                  ; resume print
    {% endif %}


[gcode_macro TEST_RESONANCE]
gcode:
	CG28
	QUAD_GANTRY_LEVEL
	SHAPER_CALIBRATE

[gcode_macro TEST_SPEED]		;for more info go to https://github.com/AndrewEllis93/Print-Tuning-Guide/blob/main/articles/determining_max_speeds_accels.md
gcode:
	# Speed
	{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
	# Iterations
	{% set iterations = params.ITERATIONS|default(5)|int %}
	# Acceleration
	{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
	# Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
	{% set bound = params.BOUND|default(20)|int %}
	# Size for small pattern box
	{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
	
	# Large pattern
		# Max positions, inset by BOUND
		{% set x_min = printer.toolhead.axis_minimum.x + bound %}
		{% set x_max = printer.toolhead.axis_maximum.x - bound %}
		{% set y_min = printer.toolhead.axis_minimum.y + bound %}
		{% set y_max = printer.toolhead.axis_maximum.y - bound %}
	
	# Small pattern at center
		# Find X/Y center point
		{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
		{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
		
		# Set small pattern box around center point
		{% set x_center_min = x_center - (smallpatternsize/2) %}
		{% set x_center_max = x_center + (smallpatternsize/2) %}
		{% set y_center_min = y_center - (smallpatternsize/2) %}
		{% set y_center_max = y_center + (smallpatternsize/2) %}

	# Save current gcode state (absolute/relative, etc)
	SAVE_GCODE_STATE NAME=TEST_SPEED
	
	# Output parameters to g-code terminal
	{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
	
	# Home and get position for comparison later:
		G28
		# QGL if not already QGLd (only if QGL section exists in config)
		{% if printer.configfile.settings.quad_gantry_level %}
			{% if printer.quad_gantry_level.applied == False %}
				QUAD_GANTRY_LEVEL
				G28 Z
			{% endif %}
		{% endif %}	
		G90
		G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
		G4 P1000 
		GET_POSITION

	# Go to starting position
	G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}

	# Set new limits
	SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}

	{% for i in range(iterations) %}
		# Large pattern
			# Diagonals
			G0 X{x_min} Y{y_min} F{speed*60}
			G0 X{x_max} Y{y_max} F{speed*60}
			G0 X{x_min} Y{y_min} F{speed*60}
			G0 X{x_max} Y{y_min} F{speed*60}
			G0 X{x_min} Y{y_max} F{speed*60}
			G0 X{x_max} Y{y_min} F{speed*60}
			
			# Box
			G0 X{x_min} Y{y_min} F{speed*60}
			G0 X{x_min} Y{y_max} F{speed*60}
			G0 X{x_max} Y{y_max} F{speed*60}
			G0 X{x_max} Y{y_min} F{speed*60}
		
		# Small pattern
			# Small diagonals 
			G0 X{x_center_min} Y{y_center_min} F{speed*60}
			G0 X{x_center_max} Y{y_center_max} F{speed*60}
			G0 X{x_center_min} Y{y_center_min} F{speed*60}
			G0 X{x_center_max} Y{y_center_min} F{speed*60}
			G0 X{x_center_min} Y{y_center_max} F{speed*60}
			G0 X{x_center_max} Y{y_center_min} F{speed*60}
			
			# Small box
			G0 X{x_center_min} Y{y_center_min} F{speed*60}
			G0 X{x_center_min} Y{y_center_max} F{speed*60}
			G0 X{x_center_max} Y{y_center_max} F{speed*60}
			G0 X{x_center_max} Y{y_center_min} F{speed*60}
	{% endfor %}

	# Restore max speed/accel/accel_to_decel to their configured values
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 

	# Re-home and get position again for comparison:
		G28
		# Go to XY home positions (in case your homing override leaves it elsewhere)
		G90
		G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
		G4 P1000 
		GET_POSITION

	# Restore previous gcode state (absolute/relative, etc)

[gcode_macro LOAD_FILAMENT]
gcode:
	ERCF_LOAD
[gcode_macro UNLOAD_FILAMENT]
gcode:
	ERCF_EJECT

[gcode_macro KILL_RABBIT]
gcode:
	ERCF_SERVO_UP
	ERCF_MOTORS_OFF

[gcode_macro LIGHTS_OUT]
gcode: 
	SET_LED 	LED=SB_led 			RED=0 		GREEN=0 	BLUE=0 		INDEX=1 #TRANSMIT=0	#set led but dont update untill last one
	SET_LED 	LED=SB_led 			RED=0 		GREEN=0 	BLUE=0 		INDEX=2 #TRANSMIT=0	#set led but dont update untill last one
	SET_LED 	LED=SB_led 			RED=0 		GREEN=0 	BLUE=0 		INDEX=3 #TRANSMIT=0	#set led but dont update untill last one
	SET_LED 	LED=btt_mini12864 	RED=0		GREEN=0 	BLUE=0 		INDEX=1 #TRANSMIT=0	#set led but dont update untill last one
	SET_LED 	LED=btt_mini12864 	RED=0 		GREEN=0 	BLUE=0 		INDEX=2 #TRANSMIT=0	#set led but dont update untill last one
	SET_LED 	LED=btt_mini12864 	RED=0 		GREEN=0 	BLUE=0 		INDEX=3 #SYNC=0		#set led but and update all others without resetting idle timeout
#####################################################################

#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [heater_bed]
#*# control = pid
#*# pid_kp = 36.130
#*# pid_ki = 1.261
#*# pid_kd = 258.780
#*#
#*# [extruder]
#*# control = pid
#*# pid_kp = 25.533
#*# pid_ki = 2.467
#*# pid_kd = 66.066
#*#
#*# [stepper_z]
#*# position_endstop = 3.478
#*#
#*# [input_shaper]
#*# shaper_type_x = mzv
#*# shaper_freq_x = 52.0
#*# shaper_type_y = mzv
#*# shaper_freq_y = 44.2
#*#
#*# [probe]
#*# z_offset = 6.310
#*#
#*# [skew_correction my_skew_profile]
#*# xy_skew = -0.00283689109086
#*# xz_skew = 0.0
#*# yz_skew = 0.0
