#####################################################################
#   Macros

# Example
# [gcode_macro ""]
# gcode:
# 	{% set hotend_temp		= 	params.HOTETemp|default(230)|int %}
#	SAVE_GCODE_STATE NAME=***
# 	M104 	S{hotend_temp}
#	G90		; Absolute movement
# 	G91		; Relitive Movements
#	G1	X71		Y250	Z9		E1	F{100*60}		# Move at 100mm/s
# 	RESTORE_GCODE_STATE NAME=***




#  [gcode_shell_command backup_cfg]
#  command: /usr/bin/bash /home/pi/printer_data/config/autocommit.sh
#  timeout: 30
#  verbose: True

#  [gcode_macro BACKUP_CFG]
#  description: Backs up config directory GitHub
#  gcode:
#      RUN_SHELL_COMMAND CMD=backup_cfg



[gcode_macro Nozzle_Swap]
gcode:
	{% set hotend_temp		= 	params.MELT_TEMP|default(250)|int %}
	SAVE_GCODE_STATE NAME=SWAP_N
	M104 	S{hotend_temp} ;	Set hot end temp
	CG28
	G90
	G0 x125 y30 z200
	M109 	S{hotend_temp} ;	Wait for hot end temp
	G91		; Relitive Movements
	G1	E5			F{5*60}			# Move at 5mm/s
	G1	E-50		F{10*60}		# Move at 100mm/s
	G1	E-50		F{10*60}		# Move at 100mm/s
	RESTORE_GCODE_STATE NAME=SWAP_N



[gcode_macro UNLOAD]
gcode:
	{% set hotend_temp		= 	params.MELT_TEMP|default(230)|int %}
	{% set final_temp		= 	params.FINAL_TEMP|default(0)|int %}
	SAVE_GCODE_STATE NAME=UNLOADF
	M104 	S{hotend_temp} ;	Set hot end temp
	M109 	S{hotend_temp} ;	Wait for hot end temp
	G91		; Relitive Movements
	G1	E-5		F{5*60}		# Move at 100mm/s
	G1	E-50		F{10*60}		# Move at 100mm/s
	G1	E-50		F{10*60}		# Move at 100mm/s
	M104 	S{final_temp} ;		Set hot end temp
	RESTORE_GCODE_STATE NAME=UNLOADF

[gcode_macro LOAD]
gcode:
	{% set hotend_temp		= 	params.HT|default(230)|int %}
	{% set final_temp		= 	params.FINAL_TEMP|default(0)|int %}
	SAVE_GCODE_STATE NAME=LOADF
	M104 	S{hotend_temp} ;	Set hot end temp
	M109 	S{hotend_temp} ;	Wait for hot end temp
	G91		; Relitive Movements
	G1	E50		F{5*60}		# Move at 100mm/s
	G1	E50		F{10*60}		# Move at 100mm/s
	M104 	S{final_temp} ;		Set hot end temp
	RESTORE_GCODE_STATE NAME=LOADF









[gcode_macro G32]				;Full (Pre Print) homing sequence
gcode:
    #SAVE_GCODE_STATE NAME=STATE_G32
   # G90                 			;Absolute Positioning
    #G28                 			;home
   # CQGL   			;Align axis with bed
	#CALIBRATE_Z
    #RESTORE_GCODE_STATE NAME=STATE_G32
	

[gcode_macro PRINT_START]
gcode:
	SAVE_GCODE_STATE NAME=STATE_PRINTSTART
	CLEAR_PAUSE
    # Parameters
    {% set bedtemp 		= 	params.BED|int %}
    {% set hotendtemp 	= 	params.HOTEND|int %}
    {% set chambertemp 	= 	params.CHAMBER|default(0)|int %}
	{% set AdjustZ		= 	params.Z_ADJUST|default(-0.0)|float %}

	{% set DockX 		= 	42.8 	%}
	{% set DockY 		= 	245 	%}

	SET_LED 	LED=SB_led 	RED=0 	GREEN=0 	BLUE=1 		INDEX=1 
	SET_LED 	LED=SB_led 	RED=0 	GREEN=0 	BLUE=1 		INDEX=2 
	SET_LED 	LED=SB_led 	RED=0 	GREEN=0 	BLUE=1 		INDEX=3 
	
	##### - Heating - #####
	#M104 		S100
    M190 		S{bedtemp} 
	M104 		S100
												
    #TEMPERATURE_WAIT SENSOR=CHAMBER MINIMUM={chambertemp}     ; wait for chamber temp
	
	SET_LED 	LED=SB_led 	RED=1 	GREEN=0 	BLUE=0 		INDEX=1 
	SET_LED 	LED=SB_led 	RED=1 	GREEN=0 	BLUE=0 		INDEX=2 
	SET_LED 	LED=SB_led 	RED=1 	GREEN=0 	BLUE=0 		INDEX=3 

	##### - Homing Sequence - #####
    CG28
	M400                           ; wait for buffer to clear
	attach_probe
	CQGL     
	RESTORE_GCODE_STATE NAME=STATE_PRINTSTART
	decontaminate WIPES=10 PURGE=10 EXTTEMP={230}
	CALIBRATE_Z
	M104 	S{hotendtemp}
	dock_probe

	SET_LED 	LED=SB_led 	RED=1 	GREEN=1 	BLUE=1  INDEX=1 
	SET_LED 	LED=SB_led 	RED=1 	GREEN=1 	BLUE=1  INDEX=2 
	SET_LED 	LED=SB_led 	RED=1 	GREEN=1 	BLUE=1  INDEX=3 

	# Quick Brush
	SAVE_GCODE_STATE NAME=STATE_QUICKBRUSH
	G90									# ABS Coordinate sys
	G0 					Z15	F10000		# Safety lift
	G0	X71		Y250	Z9	F10000		# Go to Probe side and brush height
	G0	X101				F10000		# Brush to the RIIIIIIIIIGHT
	G0	X71					F10000		# Brush to the LEEEEEEEEEEFT
	G0	X125				F10000		# Brush to the RIIIIIIIIIGHT (away from probe)
	G0			Y125	Z15	F10000		# Lift com  forward (AKA, CRISS-CROSS)
	RESTORE_GCODE_STATE NAME=STATE_QUICKBRUSH

	#Old klicky SET_GCODE_OFFSET Z_ADJUST={params.Z_ADJUST|default(-0.16)|float} MOVE=1 
	SET_GCODE_OFFSET Z_ADJUST={params.Z_ADJUST|default(-0.12)|float} MOVE=1 
	SKEW_PROFILE LOAD=my_skew_profile

[gcode_macro PRINT_END]			;at end of print
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
	#ERCF
	{%set unload =params.UNLOAD_AT_END|default(0)|int %}
	#SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0
	BEEP
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-5.0 F1800                 ; retract filament

	#{% if unload|int ==1%}
#		ERCF_EJECT
	#{% endif %}
	TURN_OFF_HEATERS
	G91
	G0 z50 F10000 # REDUCE So Probe just clears Brush
	G90
	G0 x125 y250 F12000 


    
   # SAVE_GCODE_STATE NAME=STATE_PRINT_END
    M107                                     ; turn off fan
    BED_MESH_CLEAR
    #RESTORE_GCODE_STATE NAME=STATE_PRINT_END

[gcode_macro DECONTAMINATE]
gcode:
	{% set wipe_count	= 	params.WIPES|default(2)|int %}
	{% set PurgeE		= 	params.PURGE|default(0)|int %}
	{% set Retract		= 	params.RETRACT|default(-1)|int %}
	{% set Htemp		= 	params.EXTTEMP|default(230)|int %}

	{% set PurgeX 		=	116		%}
	{% set PurgeZ		=	10		%}

	{% set BrushXR 		=	101		%}
	{% set BrushXL 		=	71		%}
	{% set BrushY 		=	250		%}
	{% set BrushZ 		=	9		%}

	SET_LED 	LED=SB_led 	RED=0 	GREEN=1 	BLUE=0  INDEX=1 
	SET_LED 	LED=SB_led 	RED=0 	GREEN=1 	BLUE=0  INDEX=2 
	SET_LED 	LED=SB_led 	RED=0 	GREEN=1 	BLUE=0  INDEX=3 

	M104 	S{Htemp}
	
	SAVE_GCODE_STATE NAME=STATE_DECONTAMINATE      		
	CG28 						# Home if needed 
   	G90 						# Absolute Cordanites
	G0 	Z50	F12000 
	G0 		X{PurgeX}	Y{BrushY}		F12000 		# Go to Purge location
	M83 													# Relitive Extrusion
	M109 	S{Htemp}										# Ensure Hotend is up to temp
	G1 		Z{PurgeZ}	E{PurgeE}				F600 					# Move down & Purge
	M400                           							# wait for buffer to clear
	G1 		E{Retract}							F600		# Retract Filiment
	G4 		P2000											# wait 1 second for pre dribble
	G1 		Z{BrushZ} 							F1000		# Move up before brush
	
	# https://www.klipper3d.org/Command_Templates.html#:~:text=first%20G1%20command.-,Template%20expansion,%C2%B6,-The%20gcode_macro%20gcode
	{% for wipe in range(wipe_count) %}					
    	 #{% for coordinate in [ ({BrushXR},{BrushY}), ({BrushXL},{BrushY}) ] %}
		 {% for coordinate in [ (101, 250), (71, 250)] %}
      		 G0 X{coordinate[0]} Y{coordinate[1] - 3/(wipe+1)} 	 F12000
    	{% endfor %}
  	{% endfor %}
	G91 
	G0 Z10	F12000 
	RESTORE_GCODE_STATE NAME=STATE_DECONTAMINATE

[gcode_macro PREHEAT]
gcode:
	{% set bedtemp 		= 	params.BED|default(110)|int %}
	{% set chambertemp 	= 	params.CHAMBER|default(0)|int %}
	M140 		S{bedtemp}
	CG28
	dock_probe
	SAVE_GCODE_STATE NAME=GSTATE_PREHEAT
	G90 # ABS Coordinate System
	G0 					Z20
	M106 S225 	# max cooling fan for chamver temp
	G0 	X125	Y125 	Z10
	RESTORE_GCODE_STATE NAME=GSTATE_PREHEAT    
	

[gcode_macro CG28]				;Conditional homing
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28
    {% endif %}

[gcode_macro CQGL]				;Conditional QGL
gcode:
    {% if printer.quad_gantry_level.applied == False %}
        QUAD_GANTRY_LEVEL
        G28 Z
    {% endif %}

[gcode_macro GOEasyAccess]		;Go to front middle	
gcode:
	SAVE_GCODE_STATE NAME=GEA
		CG28
		G90
		G0 x125 y30 z100
	RESTORE_GCODE_STATE NAME=GEA

[gcode_macro Go_Maintainance]	;Go to top front left so i can access and oil the rails
gcode:
	
    CG28
    G90
    G0 x0 y0 z200

[gcode_macro M109]
rename_existing: M99109
gcode:
    #Parameters
    {% set s = params.S|float %}
    
    M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}  ; Set hotend temp
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s} MAXIMUM={s+1}   ; Wait for hotend temp (within 1 degree)
    {% endif %}

# bed heating
[gcode_macro M190] #Dont use with bed fans
rename_existing: M99190
gcode:
    #Parameters
    {% set s = params.S|float %}

    M140 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}   ; Set bed temp
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={s} MAXIMUM={s+1}  ; Wait for bed temp (within 1 degree)
    {% endif %}

[gcode_macro M600]
gcode:
    #LCDRGB R=0 G=1 B=0  ; Turn LCD green
    PAUSE                ; Pause

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    # Parameters
    {% set z = params.Z|default(20)|int %}                                                   ; z hop amount
    
    {% if printer['pause_resume'].is_paused|int == 0 %}     
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                              ; set z hop variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}    ; set hotend temp variable for reference in resume macro
                                
       # SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0                                  ; disable filament sensor       
        SAVE_GCODE_STATE NAME=PAUSE                                                          ; save current print position for resume                
        BASE_PAUSE                                                                           ; pause print
        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}       ; check that zhop doesn't exceed z max
            G91                                                                              ; relative positioning
            G1 Z{z} F900                                                                     ; raise Z up by z hop amount
        {% else %}
            { action_respond_info("Pause zhop exceeds maximum Z height.") }                  ; if z max is exceeded, show message and set zhop value for resume to 0
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}
        G90                                                                                  ; absolute positioning
        G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000   ; park toolhead at front center
        SAVE_GCODE_STATE NAME=PAUSEPARK                                                      ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error) 
        M104 S0                                                                              ; turn off hotend
        SET_IDLE_TIMEOUT TIMEOUT=43200                                                       ; set timeout to 12 hours
    {% endif %}

[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
    # Parameters
    {% set e = params.E|default(2.5)|int %}                                          ; hotend prime amount (in mm)
    
    {% if printer['pause_resume'].is_paused|int == 1 %}
        #SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1                          ; enable filament sensor
        #RESETRGB                                                                    ; reset LCD color
        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}  ; set timeout back to configured value
        {% if etemp > 0 %}
            M109 S{etemp|int}                                                        ; wait for hotend to heat back up
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                     ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)  
        G91                                                                          ; relative positioning
        M83                                                                          ; relative extruder positioning
        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}                                                
            G1 Z{zhop * -1} E{e} F900                                                ; prime nozzle by E, lower Z back down
        {% else %}                      
            G1 Z{zhop * -1} F900                                                     ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
        {% endif %}                             
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60                          ; restore position
        BASE_RESUME                                                                  ; resume print
    {% endif %}

[gcode_macro PA_CAL]
    # Pressure Advance Simple Test macro, using .4mm nozzle.
    # Usage: PA_CAL BED=100 EXTRUDER=240
    # First prints a line with current set PA, then prints 20 line segments
    # starting with 0 PA, increasing each line by 0.005.
    
    gcode:
        {% set BED = params.BED|default(99)|float %}
        {% set EXTRUDER = params.EXTRUDER|default(239)|float %}
        PRINT_START BED_TEMP={BED} EXTRUDER_TEMP={EXTRUDER}
    
        G21 ; Millimeter units
        G90 ; Absolute XYZ
        M83 ; Relative E
        SET_VELOCITY_LIMIT ACCEL=3000 ACCEL_TO_DECEL=1500
        G92 E0
        M106 S0 
    
        G1 X120 Y70 F30000            ; move to start position
        G1 Z0.25 F300                 ; move to layer height
        G1 E0.75 F1800                ; un-retract
        G1 X140 Y70 E0.91798 F300     ; print line part one
        G1 X180 Y70 E1.83596 F9000    ; print line part two
        G1 X200 Y70 E0.91798 F300     ; print line part three
        G1 E-0.75 F1800               ; retract
        G1 Z1 F300                    ; Move above layer height  
    
        {% for i in range(0, 20) %}
          SET_PRESSURE_ADVANCE ADVANCE={i*0.005} ; set Pressure Advance
          M117 Testing Pressure Advance at: {i*0.005}
          G1 X120 Y{100+(5*i)} F30000            ; move to start position
          G1 Z0.25 F300                          ; move to layer height
          G1 E0.75 F1800                         ; un-retract
          G1 X140 Y{100+(5*i)} E0.91798 F300     ; print line part one
          G1 X180 Y{100+(5*i)} E1.83596 F9000    ; print line part two
          G1 X200 Y{100+(5*i)} E0.91798 F300     ; print line part three
          G1 E-0.75 F1800                        ; retract
          G1 Z1 F300                             ; Move above layer height  
        {% endfor %}
    
        PRINT_END


[gcode_macro LIGHTS_OUT]
gcode: 
	SET_LED 	LED=SB_led 			RED=0 		GREEN=0 	BLUE=0 		INDEX=1 #TRANSMIT=0	#set led but dont update untill last one
	SET_LED 	LED=SB_led 			RED=0 		GREEN=0 	BLUE=0 		INDEX=2 #TRANSMIT=0	#set led but dont update untill last one
	SET_LED 	LED=SB_led 			RED=0 		GREEN=0 	BLUE=0 		INDEX=3 #TRANSMIT=0	#set led but dont update untill last one
	SET_LED 	LED=btt_mini12864 	RED=0		GREEN=0 	BLUE=0 		INDEX=1 #TRANSMIT=0	#set led but dont update untill last one
	SET_LED 	LED=btt_mini12864 	RED=0 		GREEN=0 	BLUE=0 		INDEX=2 #TRANSMIT=0	#set led but dont update untill last one
	SET_LED 	LED=btt_mini12864 	RED=0 		GREEN=0 	BLUE=0 		INDEX=3 #SYNC=0		#set led but and update all others without resetting idle timeout
[gcode_macro TEST_RESONANCE]
gcode:
	CG28
	QUAD_GANTRY_LEVEL
	SHAPER_CALIBRATE

[gcode_macro TEST_SPEED]		;for more info go to https://github.com/AndrewEllis93/Print-Tuning-Guide/blob/main/articles/determining_max_speeds_accels.md
gcode:
	# Speed
	{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
	# Iterations
	{% set iterations = params.ITERATIONS|default(5)|int %}
	# Acceleration
	{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
	# Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
	{% set bound = params.BOUND|default(20)|int %}
	# Size for small pattern box
	{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
	
	# Large pattern
		# Max positions, inset by BOUND
		{% set x_min = printer.toolhead.axis_minimum.x + bound %}
		{% set x_max = printer.toolhead.axis_maximum.x - bound %}
		{% set y_min = printer.toolhead.axis_minimum.y + bound %}
		{% set y_max = printer.toolhead.axis_maximum.y - bound %}
	
	# Small pattern at center
		# Find X/Y center point
		{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
		{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
		
		# Set small pattern box around center point
		{% set x_center_min = x_center - (smallpatternsize/2) %}
		{% set x_center_max = x_center + (smallpatternsize/2) %}
		{% set y_center_min = y_center - (smallpatternsize/2) %}
		{% set y_center_max = y_center + (smallpatternsize/2) %}

	# Save current gcode state (absolute/relative, etc)
	SAVE_GCODE_STATE NAME=TEST_SPEED
	
	# Output parameters to g-code terminal
	{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
	
	# Home and get position for comparison later:
		G28
		# QGL if not already QGLd (only if QGL section exists in config)
		{% if printer.configfile.settings.quad_gantry_level %}
			{% if printer.quad_gantry_level.applied == False %}
				QUAD_GANTRY_LEVEL
				G28 Z
			{% endif %}
		{% endif %}	
		G90
		G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
		G4 P1000 
		GET_POSITION

	# Go to starting position
	G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}

	# Set new limits
	SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}

	{% for i in range(iterations) %}
		# Large pattern
			# Diagonals
			G0 X{x_min} Y{y_min} F{speed*60}
			G0 X{x_max} Y{y_max} F{speed*60}
			G0 X{x_min} Y{y_min} F{speed*60}
			G0 X{x_max} Y{y_min} F{speed*60}
			G0 X{x_min} Y{y_max} F{speed*60}
			G0 X{x_max} Y{y_min} F{speed*60}
			
			# Box
			G0 X{x_min} Y{y_min} F{speed*60}
			G0 X{x_min} Y{y_max} F{speed*60}
			G0 X{x_max} Y{y_max} F{speed*60}
			G0 X{x_max} Y{y_min} F{speed*60}
		
		# Small pattern
			# Small diagonals 
			G0 X{x_center_min} Y{y_center_min} F{speed*60}
			G0 X{x_center_max} Y{y_center_max} F{speed*60}
			G0 X{x_center_min} Y{y_center_min} F{speed*60}
			G0 X{x_center_max} Y{y_center_min} F{speed*60}
			G0 X{x_center_min} Y{y_center_max} F{speed*60}
			G0 X{x_center_max} Y{y_center_min} F{speed*60}
			
			# Small box
			G0 X{x_center_min} Y{y_center_min} F{speed*60}
			G0 X{x_center_min} Y{y_center_max} F{speed*60}
			G0 X{x_center_max} Y{y_center_max} F{speed*60}
			G0 X{x_center_max} Y{y_center_min} F{speed*60}
	{% endfor %}

	# Restore max speed/accel/accel_to_decel to their configured values
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 

	# Re-home and get position again for comparison:
		G28
		# Go to XY home positions (in case your homing override leaves it elsewhere)
		G90
		G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
		G4 P1000 
		GET_POSITION

	# Restore previous gcode state (absolute/relative, etc)



	










# ERCF #--------------------------------------------------------------------------------------------------------
# [gcode_macro LOAD_FILAMENT]
# gcode:
# 	ERCF_LOAD
# [gcode_macro UNLOAD_FILAMENT]
# gcode:
# 	ERCF_EJECT

# [gcode_macro KILL_RABBIT]
# gcode:
# 	ERCF_SERVO_UP
# 	ERCF_MOTORS_OFF

